"use strict";
/** @type {
 * {peg$SyntaxError: {  message:string,
    expected:any,
    found:any,
    location:any,
    name:"SyntaxError",}
    ,parse: (input: any, options?: any) => any}} */
module.exports = /*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */
    (function () {
        "use strict";
        function peg$subclass(child, parent) {
            function ctor() { this.constructor = child; }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
        }
        function peg$SyntaxError(message, expected, found, location) {
            this.message = message;
            this.expected = expected;
            this.found = found;
            this.location = location;
            this.name = "SyntaxError";
            if (typeof Error.captureStackTrace === "function") {
                Error.captureStackTrace(this, peg$SyntaxError);
            }
        }
        peg$subclass(peg$SyntaxError, Error);
        peg$SyntaxError.buildMessage = function (expected, found) {
            var DESCRIBE_EXPECTATION_FNS = {
                literal: function (expectation) {
                    return "\"" + literalEscape(expectation.text) + "\"";
                },
                "class": function (expectation) {
                    var escapedParts = "", i;
                    for (i = 0; i < expectation.parts.length; i++) {
                        escapedParts += expectation.parts[i] instanceof Array
                            ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
                            : classEscape(expectation.parts[i]);
                    }
                    return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
                },
                any: function (expectation) {
                    return "any character";
                },
                end: function (expectation) {
                    return "end of input";
                },
                other: function (expectation) {
                    return expectation.description;
                }
            };
            function hex(ch) {
                return ch.charCodeAt(0).toString(16).toUpperCase();
            }
            function literalEscape(s) {
                return s
                    .replace(/\\/g, '\\\\')
                    .replace(/"/g, '\\"')
                    .replace(/\0/g, '\\0')
                    .replace(/\t/g, '\\t')
                    .replace(/\n/g, '\\n')
                    .replace(/\r/g, '\\r')
                    .replace(/[\x00-\x0F]/g, function (ch) { return '\\x0' + hex(ch); })
                    .replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) { return '\\x' + hex(ch); });
            }
            function classEscape(s) {
                return s
                    .replace(/\\/g, '\\\\')
                    .replace(/\]/g, '\\]')
                    .replace(/\^/g, '\\^')
                    .replace(/-/g, '\\-')
                    .replace(/\0/g, '\\0')
                    .replace(/\t/g, '\\t')
                    .replace(/\n/g, '\\n')
                    .replace(/\r/g, '\\r')
                    .replace(/[\x00-\x0F]/g, function (ch) { return '\\x0' + hex(ch); })
                    .replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) { return '\\x' + hex(ch); });
            }
            function describeExpectation(expectation) {
                return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
            }
            function describeExpected(expected) {
                var descriptions = new Array(expected.length), i, j;
                for (i = 0; i < expected.length; i++) {
                    descriptions[i] = describeExpectation(expected[i]);
                }
                descriptions.sort();
                if (descriptions.length > 0) {
                    for (i = 1, j = 1; i < descriptions.length; i++) {
                        if (descriptions[i - 1] !== descriptions[i]) {
                            descriptions[j] = descriptions[i];
                            j++;
                        }
                    }
                    descriptions.length = j;
                }
                switch (descriptions.length) {
                    case 1:
                        return descriptions[0];
                    case 2:
                        return descriptions[0] + " or " + descriptions[1];
                    default:
                        return descriptions.slice(0, -1).join(", ")
                            + ", or "
                            + descriptions[descriptions.length - 1];
                }
            }
            function describeFound(found) {
                return found ? "\"" + literalEscape(found) + "\"" : "end of input";
            }
            return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
        };
        function peg$parse(input, options) {
            options = options !== void 0 ? options : {};
            var peg$FAILED = {}, peg$startRuleFunctions = { Class: peg$parseClass }, peg$startRuleFunction = peg$parseClass, peg$c0 = "class", peg$c1 = peg$literalExpectation("class", false), peg$c2 = "{", peg$c3 = peg$literalExpectation("{", false), peg$c4 = "}", peg$c5 = peg$literalExpectation("}", false), peg$c6 = function (name, data) {
                return { "name": name, "data": data.filter(function (element) { return element !== null; }), };
            }, peg$c7 = function () { return null; }, peg$c8 = "public", peg$c9 = peg$literalExpectation("public", false), peg$c10 = function () { }, peg$c11 = "private", peg$c12 = peg$literalExpectation("private", false), peg$c13 = "", peg$c14 = function (ann, data) { return data; }, peg$c15 = ";", peg$c16 = peg$literalExpectation(";", false), peg$c17 = function (type, name) { return { "type": type, "name": name }; }, peg$c18 = "@", peg$c19 = peg$literalExpectation("@", false), peg$c20 = "(", peg$c21 = peg$literalExpectation("(", false), peg$c22 = /^[^)]/, peg$c23 = peg$classExpectation([")"], true, false), peg$c24 = ")", peg$c25 = peg$literalExpectation(")", false), peg$c26 = /^[_$a-zA-Z]/, peg$c27 = peg$classExpectation(["_", "$", ["a", "z"], ["A", "Z"]], false, false), peg$c28 = /^[_$a-zA-Z0-9]/, peg$c29 = peg$classExpectation(["_", "$", ["a", "z"], ["A", "Z"], ["0", "9"]], false, false), peg$c30 = function () { return text(); }, peg$c31 = "{}", peg$c32 = peg$literalExpectation("{}", false), peg$c33 = /^[^{}]/, peg$c34 = peg$classExpectation(["{", "}"], true, false), peg$c35 = peg$otherExpectation("whitespace"), peg$c36 = /^[ \t\n\r]/, peg$c37 = peg$classExpectation([" ", "\t", "\n", "\r"], false, false), peg$currPos = 0, peg$savedPos = 0, peg$posDetailsCache = [{ line: 1, column: 1 }], peg$maxFailPos = 0, peg$maxFailExpected = [], peg$silentFails = 0, peg$resultsCache = {}, peg$result;
            if ("startRule" in options) {
                if (!(options.startRule in peg$startRuleFunctions)) {
                    throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
                }
                peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
            }
            function text() {
                return input.substring(peg$savedPos, peg$currPos);
            }
            function location() {
                return peg$computeLocation(peg$savedPos, peg$currPos);
            }
            function expected(description, location) {
                location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos);
                throw peg$buildStructuredError([peg$otherExpectation(description)], input.substring(peg$savedPos, peg$currPos), location);
            }
            function error(message, location) {
                location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos);
                throw peg$buildSimpleError(message, location);
            }
            function peg$literalExpectation(text, ignoreCase) {
                return { type: "literal", text: text, ignoreCase: ignoreCase };
            }
            function peg$classExpectation(parts, inverted, ignoreCase) {
                return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
            }
            function peg$anyExpectation() {
                return { type: "any" };
            }
            function peg$endExpectation() {
                return { type: "end" };
            }
            function peg$otherExpectation(description) {
                return { type: "other", description: description };
            }
            function peg$computePosDetails(pos) {
                var details = peg$posDetailsCache[pos], p;
                if (details) {
                    return details;
                }
                else {
                    p = pos - 1;
                    while (!peg$posDetailsCache[p]) {
                        p--;
                    }
                    details = peg$posDetailsCache[p];
                    details = {
                        line: details.line,
                        column: details.column
                    };
                    while (p < pos) {
                        if (input.charCodeAt(p) === 10) {
                            details.line++;
                            details.column = 1;
                        }
                        else {
                            details.column++;
                        }
                        p++;
                    }
                    peg$posDetailsCache[pos] = details;
                    return details;
                }
            }
            function peg$computeLocation(startPos, endPos) {
                var startPosDetails = peg$computePosDetails(startPos), endPosDetails = peg$computePosDetails(endPos);
                return {
                    start: {
                        offset: startPos,
                        line: startPosDetails.line,
                        column: startPosDetails.column
                    },
                    end: {
                        offset: endPos,
                        line: endPosDetails.line,
                        column: endPosDetails.column
                    }
                };
            }
            function peg$fail(expected) {
                if (peg$currPos < peg$maxFailPos) {
                    return;
                }
                if (peg$currPos > peg$maxFailPos) {
                    peg$maxFailPos = peg$currPos;
                    peg$maxFailExpected = [];
                }
                peg$maxFailExpected.push(expected);
            }
            function peg$buildSimpleError(message, location) {
                return new peg$SyntaxError(message, null, null, location);
            }
            function peg$buildStructuredError(expected, found, location) {
                return new peg$SyntaxError(peg$SyntaxError.buildMessage(expected, found), expected, found, location);
            }
            function peg$parseClass() {
                var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;
                var key = peg$currPos * 11 + 0, cached = peg$resultsCache[key];
                if (cached) {
                    peg$currPos = cached.nextPos;
                    return cached.result;
                }
                s0 = peg$currPos;
                s1 = [];
                s2 = peg$currPos;
                s3 = peg$parse_();
                if (s3 !== peg$FAILED) {
                    s4 = peg$parseAnnotation();
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parse_();
                        if (s5 !== peg$FAILED) {
                            s3 = [s3, s4, s5];
                            s2 = s3;
                        }
                        else {
                            peg$currPos = s2;
                            s2 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s2;
                        s2 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                }
                while (s2 !== peg$FAILED) {
                    s1.push(s2);
                    s2 = peg$currPos;
                    s3 = peg$parse_();
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parseAnnotation();
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parse_();
                            if (s5 !== peg$FAILED) {
                                s3 = [s3, s4, s5];
                                s2 = s3;
                            }
                            else {
                                peg$currPos = s2;
                                s2 = peg$FAILED;
                            }
                        }
                        else {
                            peg$currPos = s2;
                            s2 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s2;
                        s2 = peg$FAILED;
                    }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parse_();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parsePubOrPri();
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parse_();
                            if (s4 !== peg$FAILED) {
                                if (input.substr(peg$currPos, 5) === peg$c0) {
                                    s5 = peg$c0;
                                    peg$currPos += 5;
                                }
                                else {
                                    s5 = peg$FAILED;
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c1);
                                    }
                                }
                                if (s5 !== peg$FAILED) {
                                    s6 = peg$parse_();
                                    if (s6 !== peg$FAILED) {
                                        s7 = peg$parses();
                                        if (s7 !== peg$FAILED) {
                                            s8 = peg$parse_();
                                            if (s8 !== peg$FAILED) {
                                                if (input.charCodeAt(peg$currPos) === 123) {
                                                    s9 = peg$c2;
                                                    peg$currPos++;
                                                }
                                                else {
                                                    s9 = peg$FAILED;
                                                    if (peg$silentFails === 0) {
                                                        peg$fail(peg$c3);
                                                    }
                                                }
                                                if (s9 !== peg$FAILED) {
                                                    s10 = [];
                                                    s11 = peg$parseInClass();
                                                    while (s11 !== peg$FAILED) {
                                                        s10.push(s11);
                                                        s11 = peg$parseInClass();
                                                    }
                                                    if (s10 !== peg$FAILED) {
                                                        if (input.charCodeAt(peg$currPos) === 125) {
                                                            s11 = peg$c4;
                                                            peg$currPos++;
                                                        }
                                                        else {
                                                            s11 = peg$FAILED;
                                                            if (peg$silentFails === 0) {
                                                                peg$fail(peg$c5);
                                                            }
                                                        }
                                                        if (s11 !== peg$FAILED) {
                                                            peg$savedPos = s0;
                                                            s1 = peg$c6(s7, s10);
                                                            s0 = s1;
                                                        }
                                                        else {
                                                            peg$currPos = s0;
                                                            s0 = peg$FAILED;
                                                        }
                                                    }
                                                    else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                    }
                                                }
                                                else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                }
                                            }
                                            else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        }
                                        else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    }
                                    else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                }
                                else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            }
                            else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        }
                        else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
                return s0;
            }
            function peg$parseInClass() {
                var s0, s1, s2;
                var key = peg$currPos * 11 + 1, cached = peg$resultsCache[key];
                if (cached) {
                    peg$currPos = cached.nextPos;
                    return cached.result;
                }
                s0 = peg$parseOneData();
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parsefunction();
                    if (s1 !== peg$FAILED) {
                        s2 = peg$parse_();
                        if (s2 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c7();
                            s0 = s1;
                        }
                        else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
                return s0;
            }
            function peg$parsePubOrPri() {
                var s0, s1;
                var key = peg$currPos * 11 + 2, cached = peg$resultsCache[key];
                if (cached) {
                    peg$currPos = cached.nextPos;
                    return cached.result;
                }
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 6) === peg$c8) {
                    s1 = peg$c8;
                    peg$currPos += 6;
                }
                else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c9);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c10();
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 7) === peg$c11) {
                        s1 = peg$c11;
                        peg$currPos += 7;
                    }
                    else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c12);
                        }
                    }
                    if (s1 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c10();
                    }
                    s0 = s1;
                    if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = peg$c13;
                        if (s1 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c10();
                        }
                        s0 = s1;
                    }
                }
                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
                return s0;
            }
            function peg$parseOneData() {
                var s0, s1, s2, s3, s4, s5;
                var key = peg$currPos * 11 + 3, cached = peg$resultsCache[key];
                if (cached) {
                    peg$currPos = cached.nextPos;
                    return cached.result;
                }
                s0 = peg$currPos;
                s1 = [];
                s2 = peg$currPos;
                s3 = peg$parse_();
                if (s3 !== peg$FAILED) {
                    s4 = peg$parseAnnotation();
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parse_();
                        if (s5 !== peg$FAILED) {
                            s3 = [s3, s4, s5];
                            s2 = s3;
                        }
                        else {
                            peg$currPos = s2;
                            s2 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s2;
                        s2 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                }
                while (s2 !== peg$FAILED) {
                    s1.push(s2);
                    s2 = peg$currPos;
                    s3 = peg$parse_();
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parseAnnotation();
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parse_();
                            if (s5 !== peg$FAILED) {
                                s3 = [s3, s4, s5];
                                s2 = s3;
                            }
                            else {
                                peg$currPos = s2;
                                s2 = peg$FAILED;
                            }
                        }
                        else {
                            peg$currPos = s2;
                            s2 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s2;
                        s2 = peg$FAILED;
                    }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parse_();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parseData();
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parse_();
                            if (s4 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c14(s1, s3);
                                s0 = s1;
                            }
                            else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        }
                        else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
                return s0;
            }
            function peg$parseData() {
                var s0, s1, s2, s3, s4, s5, s6, s7, s8;
                var key = peg$currPos * 11 + 4, cached = peg$resultsCache[key];
                if (cached) {
                    peg$currPos = cached.nextPos;
                    return cached.result;
                }
                s0 = peg$currPos;
                s1 = peg$parsePubOrPri();
                if (s1 !== peg$FAILED) {
                    s2 = peg$parse_();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parses();
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parse_();
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parses();
                                if (s5 !== peg$FAILED) {
                                    s6 = peg$parse_();
                                    if (s6 !== peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 59) {
                                            s7 = peg$c15;
                                            peg$currPos++;
                                        }
                                        else {
                                            s7 = peg$FAILED;
                                            if (peg$silentFails === 0) {
                                                peg$fail(peg$c16);
                                            }
                                        }
                                        if (s7 !== peg$FAILED) {
                                            s8 = peg$parse_();
                                            if (s8 !== peg$FAILED) {
                                                peg$savedPos = s0;
                                                s1 = peg$c17(s3, s5);
                                                s0 = s1;
                                            }
                                            else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        }
                                        else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    }
                                    else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                }
                                else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            }
                            else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        }
                        else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
                return s0;
            }
            function peg$parseAnnotation() {
                var s0, s1, s2, s3, s4, s5;
                var key = peg$currPos * 11 + 5, cached = peg$resultsCache[key];
                if (cached) {
                    peg$currPos = cached.nextPos;
                    return cached.result;
                }
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 64) {
                    s1 = peg$c18;
                    peg$currPos++;
                }
                else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c19);
                    }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parses();
                    if (s2 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 40) {
                            s3 = peg$c20;
                            peg$currPos++;
                        }
                        else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c21);
                            }
                        }
                        if (s3 !== peg$FAILED) {
                            s4 = [];
                            if (peg$c22.test(input.charAt(peg$currPos))) {
                                s5 = input.charAt(peg$currPos);
                                peg$currPos++;
                            }
                            else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c23);
                                }
                            }
                            while (s5 !== peg$FAILED) {
                                s4.push(s5);
                                if (peg$c22.test(input.charAt(peg$currPos))) {
                                    s5 = input.charAt(peg$currPos);
                                    peg$currPos++;
                                }
                                else {
                                    s5 = peg$FAILED;
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c23);
                                    }
                                }
                            }
                            if (s4 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 41) {
                                    s5 = peg$c24;
                                    peg$currPos++;
                                }
                                else {
                                    s5 = peg$FAILED;
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c25);
                                    }
                                }
                                if (s5 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c10();
                                    s0 = s1;
                                }
                                else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            }
                            else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        }
                        else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 64) {
                        s1 = peg$c18;
                        peg$currPos++;
                    }
                    else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c19);
                        }
                    }
                    if (s1 !== peg$FAILED) {
                        s2 = peg$parses();
                        if (s2 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c10();
                            s0 = s1;
                        }
                        else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
                return s0;
            }
            function peg$parses() {
                var s0, s1, s2, s3;
                var key = peg$currPos * 11 + 6, cached = peg$resultsCache[key];
                if (cached) {
                    peg$currPos = cached.nextPos;
                    return cached.result;
                }
                s0 = peg$currPos;
                if (peg$c26.test(input.charAt(peg$currPos))) {
                    s1 = input.charAt(peg$currPos);
                    peg$currPos++;
                }
                else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c27);
                    }
                }
                if (s1 !== peg$FAILED) {
                    s2 = [];
                    if (peg$c28.test(input.charAt(peg$currPos))) {
                        s3 = input.charAt(peg$currPos);
                        peg$currPos++;
                    }
                    else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c29);
                        }
                    }
                    while (s3 !== peg$FAILED) {
                        s2.push(s3);
                        if (peg$c28.test(input.charAt(peg$currPos))) {
                            s3 = input.charAt(peg$currPos);
                            peg$currPos++;
                        }
                        else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c29);
                            }
                        }
                    }
                    if (s2 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c30();
                        s0 = s1;
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
                return s0;
            }
            function peg$parsefunction() {
                var s0, s1, s2;
                var key = peg$currPos * 11 + 7, cached = peg$resultsCache[key];
                if (cached) {
                    peg$currPos = cached.nextPos;
                    return cached.result;
                }
                s0 = peg$currPos;
                s1 = peg$parsecontent();
                if (s1 !== peg$FAILED) {
                    s2 = peg$parseword();
                    if (s2 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c10();
                        s0 = s1;
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
                return s0;
            }
            function peg$parseword() {
                var s0, s1, s2, s3;
                var key = peg$currPos * 11 + 8, cached = peg$resultsCache[key];
                if (cached) {
                    peg$currPos = cached.nextPos;
                    return cached.result;
                }
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 2) === peg$c31) {
                    s1 = peg$c31;
                    peg$currPos += 2;
                }
                else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c32);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c10();
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 123) {
                        s1 = peg$c2;
                        peg$currPos++;
                    }
                    else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c3);
                        }
                    }
                    if (s1 !== peg$FAILED) {
                        s2 = [];
                        s3 = peg$parseword();
                        if (s3 !== peg$FAILED) {
                            while (s3 !== peg$FAILED) {
                                s2.push(s3);
                                s3 = peg$parseword();
                            }
                        }
                        else {
                            s2 = peg$FAILED;
                        }
                        if (s2 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 125) {
                                s3 = peg$c4;
                                peg$currPos++;
                            }
                            else {
                                s3 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c5);
                                }
                            }
                            if (s3 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c10();
                                s0 = s1;
                            }
                            else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        }
                        else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = peg$parsecontent();
                        if (s1 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c10();
                        }
                        s0 = s1;
                    }
                }
                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
                return s0;
            }
            function peg$parsecontent() {
                var s0, s1, s2;
                var key = peg$currPos * 11 + 9, cached = peg$resultsCache[key];
                if (cached) {
                    peg$currPos = cached.nextPos;
                    return cached.result;
                }
                s0 = peg$currPos;
                s1 = [];
                if (peg$c33.test(input.charAt(peg$currPos))) {
                    s2 = input.charAt(peg$currPos);
                    peg$currPos++;
                }
                else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c34);
                    }
                }
                if (s2 !== peg$FAILED) {
                    while (s2 !== peg$FAILED) {
                        s1.push(s2);
                        if (peg$c33.test(input.charAt(peg$currPos))) {
                            s2 = input.charAt(peg$currPos);
                            peg$currPos++;
                        }
                        else {
                            s2 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c34);
                            }
                        }
                    }
                }
                else {
                    s1 = peg$FAILED;
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c10();
                }
                s0 = s1;
                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
                return s0;
            }
            function peg$parse_() {
                var s0, s1, s2;
                var key = peg$currPos * 11 + 10, cached = peg$resultsCache[key];
                if (cached) {
                    peg$currPos = cached.nextPos;
                    return cached.result;
                }
                peg$silentFails++;
                s0 = peg$currPos;
                s1 = [];
                if (peg$c36.test(input.charAt(peg$currPos))) {
                    s2 = input.charAt(peg$currPos);
                    peg$currPos++;
                }
                else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c37);
                    }
                }
                while (s2 !== peg$FAILED) {
                    s1.push(s2);
                    if (peg$c36.test(input.charAt(peg$currPos))) {
                        s2 = input.charAt(peg$currPos);
                        peg$currPos++;
                    }
                    else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c37);
                        }
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c10();
                }
                s0 = s1;
                peg$silentFails--;
                if (s0 === peg$FAILED) {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c35);
                    }
                }
                peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
                return s0;
            }
            peg$result = peg$startRuleFunction();
            if (peg$result !== peg$FAILED && peg$currPos === input.length) {
                return peg$result;
            }
            else {
                if (peg$result !== peg$FAILED && peg$currPos < input.length) {
                    peg$fail(peg$endExpectation());
                }
                throw peg$buildStructuredError(peg$maxFailExpected, peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null, peg$maxFailPos < input.length
                    ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
                    : peg$computeLocation(peg$maxFailPos, peg$maxFailPos));
            }
        }
        return {
            SyntaxError: peg$SyntaxError,
            parse: peg$parse
        };
    })();
